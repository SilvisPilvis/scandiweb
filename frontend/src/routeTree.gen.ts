/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as ProductProductIdImport } from './routes/product/$productId'

// Create Virtual Routes

const TechLazyImport = createFileRoute('/tech')()
const ClothesLazyImport = createFileRoute('/clothes')()
const AllLazyImport = createFileRoute('/all')()
const IndexLazyImport = createFileRoute('/')()

// Create/Update Routes

const TechLazyRoute = TechLazyImport.update({
  id: '/tech',
  path: '/tech',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/tech.lazy').then((d) => d.Route))

const ClothesLazyRoute = ClothesLazyImport.update({
  id: '/clothes',
  path: '/clothes',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/clothes.lazy').then((d) => d.Route))

const AllLazyRoute = AllLazyImport.update({
  id: '/all',
  path: '/all',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/all.lazy').then((d) => d.Route))

const IndexLazyRoute = IndexLazyImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any).lazy(() => import('./routes/index.lazy').then((d) => d.Route))

const ProductProductIdRoute = ProductProductIdImport.update({
  id: '/product/$productId',
  path: '/product/$productId',
  getParentRoute: () => rootRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexLazyImport
      parentRoute: typeof rootRoute
    }
    '/all': {
      id: '/all'
      path: '/all'
      fullPath: '/all'
      preLoaderRoute: typeof AllLazyImport
      parentRoute: typeof rootRoute
    }
    '/clothes': {
      id: '/clothes'
      path: '/clothes'
      fullPath: '/clothes'
      preLoaderRoute: typeof ClothesLazyImport
      parentRoute: typeof rootRoute
    }
    '/tech': {
      id: '/tech'
      path: '/tech'
      fullPath: '/tech'
      preLoaderRoute: typeof TechLazyImport
      parentRoute: typeof rootRoute
    }
    '/product/$productId': {
      id: '/product/$productId'
      path: '/product/$productId'
      fullPath: '/product/$productId'
      preLoaderRoute: typeof ProductProductIdImport
      parentRoute: typeof rootRoute
    }
  }
}

// Create and export the route tree

export interface FileRoutesByFullPath {
  '/': typeof IndexLazyRoute
  '/all': typeof AllLazyRoute
  '/clothes': typeof ClothesLazyRoute
  '/tech': typeof TechLazyRoute
  '/product/$productId': typeof ProductProductIdRoute
}

export interface FileRoutesByTo {
  '/': typeof IndexLazyRoute
  '/all': typeof AllLazyRoute
  '/clothes': typeof ClothesLazyRoute
  '/tech': typeof TechLazyRoute
  '/product/$productId': typeof ProductProductIdRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexLazyRoute
  '/all': typeof AllLazyRoute
  '/clothes': typeof ClothesLazyRoute
  '/tech': typeof TechLazyRoute
  '/product/$productId': typeof ProductProductIdRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths: '/' | '/all' | '/clothes' | '/tech' | '/product/$productId'
  fileRoutesByTo: FileRoutesByTo
  to: '/' | '/all' | '/clothes' | '/tech' | '/product/$productId'
  id: '__root__' | '/' | '/all' | '/clothes' | '/tech' | '/product/$productId'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexLazyRoute: typeof IndexLazyRoute
  AllLazyRoute: typeof AllLazyRoute
  ClothesLazyRoute: typeof ClothesLazyRoute
  TechLazyRoute: typeof TechLazyRoute
  ProductProductIdRoute: typeof ProductProductIdRoute
}

const rootRouteChildren: RootRouteChildren = {
  IndexLazyRoute: IndexLazyRoute,
  AllLazyRoute: AllLazyRoute,
  ClothesLazyRoute: ClothesLazyRoute,
  TechLazyRoute: TechLazyRoute,
  ProductProductIdRoute: ProductProductIdRoute,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/all",
        "/clothes",
        "/tech",
        "/product/$productId"
      ]
    },
    "/": {
      "filePath": "index.lazy.tsx"
    },
    "/all": {
      "filePath": "all.lazy.tsx"
    },
    "/clothes": {
      "filePath": "clothes.lazy.tsx"
    },
    "/tech": {
      "filePath": "tech.lazy.tsx"
    },
    "/product/$productId": {
      "filePath": "product/$productId.tsx"
    }
  }
}
ROUTE_MANIFEST_END */
